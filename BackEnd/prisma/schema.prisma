// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id            Int       @id @default(autoincrement())
  nombre        String
  apellido      String
  dni           String     @unique
  celular       String
  email         String
  direccion     String
  fechaRegistro DateTime   @default(now())
  mascotas      Mascota[]  
  atenciones    Atencion[] 
  boletas       Boleta[]   
  proformas     ProformaServicio[]
}

model Mascota {
  id            Int        @id @default(autoincrement())
  codigo        String     // Cambiado a no ser unique
  nombre        String
  genero        String
  raza          String
  especie       TipoMascota @relation(fields: [tipoMascotaId], references: [id])
  edad          Int
  peso          Float
  fechaRegistro DateTime    @default(now())
  cliente       Cliente     @relation(fields: [clienteId], references: [id])
  clienteId     Int
  tipoMascotaId Int
  size          SizeMascota @relation(fields: [sizeId], references: [id]) // Nueva relación añadida
  sizeId        Int         // Nueva columna añadida
  atenciones    Atencion[] 
  proformas     ProformaServicio[] 
}

model TipoMascota {
  id       Int       @id @default(autoincrement())
  nombre   String
  mascotas Mascota[] 
  proformas ProformaServicio[] 
}

model Servicio {
  id             Int       @id @default(autoincrement())
  nombre         String
  descripcion    String
  costo          Float
  consideraciones String
  atenciones     Atencion[]      
  detallesBoleta DetalleBoleta[] 
  proformas     ProformaServicio[]
}

model ProformaServicio {
  id           Int        @id @default(autoincrement())
  cliente      Cliente     @relation(fields: [clienteId], references: [id])
  clienteId    Int
  mascota      Mascota     @relation(fields: [mascotaId], references: [id])
  mascotaId    Int
  servicio     Servicio    @relation(fields: [servicioId], references: [id])
  servicioId   Int
  size         SizeMascota @relation(fields: [sizeId], references: [id])
  sizeId       Int
  tipoMascota  TipoMascota @relation(fields: [tipoMascotaId], references: [id])
  tipoMascotaId Int
  costoTotal   Float
}

model Atencion {
  id             Int        @id @default(autoincrement())
  cliente        Cliente     @relation(fields: [clienteId], references: [id])
  clienteId      Int
  mascota        Mascota     @relation(fields: [mascotaId], references: [id])
  mascotaId      Int
  veterinario    Veterinario @relation(fields: [veterinarioId], references: [id])
  veterinarioId  Int
  servicio       Servicio    @relation(fields: [servicioId], references: [id])
  servicioId     Int
  fechaCita      DateTime
  consideraciones String
  descripcion    String
}

model Veterinario {
  id          Int        @id @default(autoincrement())
  nombre      String
  atenciones  Atencion[] 
}

model Boleta {
  id            Int        @id @default(autoincrement())
  codigo        String      @unique
  cliente       Cliente     @relation(fields: [clienteId], references: [id])
  clienteId     Int
  fecha         DateTime    @default(now())
  total         Float
  detallesBoleta DetalleBoleta[] 
}

model DetalleBoleta {
  id            Int        @id @default(autoincrement())
  boleta        Boleta      @relation(fields: [boletaId], references: [id])
  boletaId      Int
  servicio      Servicio    @relation(fields: [servicioId], references: [id])
  servicioId    Int
  descripcion   String
  cantidad      Int
  costo         Float
}

model Rol {
  id       Int       @id @default(autoincrement())
  nombre   String    
  empleados Empleado[]
}

model Empleado {
  id          Int       @id @default(autoincrement())
  nombre      String
  email       String    @unique
  password    String    
  rol         Rol       @relation(fields: [rolId], references: [id])
  rolId       Int
  creadoEn    DateTime  @default(now())
}

model SizeMascota {
  id       Int        @id @default(autoincrement())
  nombre   String     
  proformas ProformaServicio[] 
  mascotas Mascota[] 
}
